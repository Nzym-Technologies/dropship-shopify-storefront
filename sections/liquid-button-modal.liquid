<div
  id="liquid-button-container"
  data-button-text="{{ section.settings.button_text }}"
  data-product-price="{% if product %}{{ product.price | money_without_currency }}{% else %}{{ section.settings.product_price }}{% endif %}"
  data-checkout-url="{{ section.settings.checkout_url | default: '/checkout' }}"
  data-variant-id="{% if product %}{{ product.selected_or_first_available_variant.id }}{% else %}{{ section.settings.variant_id }}{% endif %}"
></div>

{% schema %}
{
  "name": "Custom Order Button",
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Order Now"
    },
    {
      "type": "text",
      "id": "product_price",
      "label": "Product Price (if not on product page)",
      "default": "999"
    },
    {
      "type": "text",
      "id": "checkout_url",
      "label": "Checkout URL",
      "default": "/checkout"
    },
    {
      "type": "text",
      "id": "variant_id",
      "label": "Product Variant ID (if not on product page)",
      "default": "000"
    }
  ],
  "presets": [
    {
      "name": "Custom Order Button",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<script>
  // Load React and ReactDOM from CDN
  const loadScript = (src) => {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  };

  // Load Google Font
  const loadFont = () => {
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://fonts.googleapis.com/css2?family=Forum&display=swap';
    document.head.appendChild(link);
  };

  // Wait for all scripts to load before rendering
  Promise.all([
    loadScript('https://unpkg.com/react@18/umd/react.production.min.js'),
    loadScript('https://unpkg.com/react-dom@18/umd/react-dom.production.min.js')
  ]).then(() => {
    // Load font
    loadFont();
    
    // Get container and data attributes
    const container = document.getElementById('liquid-button-container');
    const buttonText = container.dataset.buttonText || "Order Now";
    const productPrice = container.dataset.productPrice || "999";
    const checkoutUrl = container.dataset.checkoutUrl || "/checkout";
    
    // Store the variant ID globally so it can be accessed in the component
    window.PRODUCT_VARIANT_ID = container.dataset.variantId;
    
    // The LiquidButton component
    const LiquidButton = ({ buttonText, productPrice, checkoutUrl }) => {
      const [isModalOpen, setIsModalOpen] = React.useState(false);
      const [formData, setFormData] = React.useState({
        name: '',
        address: '',
        pincode: '',
        contactNumber: ''
      });
      const [errors, setErrors] = React.useState({});
      const [isSubmitting, setIsSubmitting] = React.useState(false);
      const [isOrderCreated, setIsOrderCreated] = React.useState(false);

      // Validate Indian mobile number (10 digits, starting with 6, 7, 8, or 9)
      const validateMobileNumber = (number) => {
        const regex = /^[6-9]\d{9}$/;
        return regex.test(number);
      };

      // Validate Indian pincode (6 digits)
      const validatePincode = (pincode) => {
        const regex = /^\d{6}$/;
        return regex.test(pincode);
      };

      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({
          ...formData,
          [name]: value
        });
        
        // Clear error when typing
        if (errors[name]) {
          setErrors({
            ...errors,
            [name]: null
          });
        }
      };

      const validateForm = () => {
        let tempErrors = {};
        let isValid = true;

        if (!formData.name.trim()) {
          tempErrors.name = "Name is required";
          isValid = false;
        }

        if (!formData.address.trim()) {
          tempErrors.address = "Address is required";
          isValid = false;
        }

        if (!formData.pincode.trim()) {
          tempErrors.pincode = "Pincode is required";
          isValid = false;
        } else if (!validatePincode(formData.pincode)) {
          tempErrors.pincode = "Please enter a valid 6-digit pincode";
          isValid = false;
        }

        if (!formData.contactNumber.trim()) {
          tempErrors.contactNumber = "Contact number is required";
          isValid = false;
        } else if (!validateMobileNumber(formData.contactNumber)) {
          tempErrors.contactNumber = "Please enter a valid Indian mobile number";
          isValid = false;
        }

        setErrors(tempErrors);
        return isValid;
      };

      const handleSubmit = () => {
        if (validateForm()) {
          setIsSubmitting(true);
          
          // Prepare the line items data (can be dynamically generated from props)
          const lineItems = [
            {
              variant_id: window.PRODUCT_VARIANT_ID || window.ShopifyAnalytics?.meta?.product?.variants[0]?.id,
              quantity: 1
            }
          ];
          
          // First, create a cart with the customer information as cart attributes
          fetch('/cart/clear.js', { method: 'POST' })
            .then(() => {
              return fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  items: lineItems,
                  attributes: {
                    'Customer Name': formData.name,
                    'Customer Address': formData.address,
                    'Customer Pincode': formData.pincode,
                    'Customer Phone': formData.contactNumber,
                    'Order Source': 'Custom Order Button'
                  }
                })
              });
            })
            .then(response => response.json())
            .then(() => {
              // Create checkout with custom attributes
              return fetch('/cart/update.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  note: `Order placed via custom form. Customer Details - Name: ${formData.name}, Address: ${formData.address}, Pincode: ${formData.pincode}, Phone: ${formData.contactNumber}`,
                  attributes: {
                    'Customer Name': formData.name,
                    'Customer Address': formData.address,
                    'Customer Pincode': formData.pincode,
                    'Customer Phone': formData.contactNumber,
                    'Payment Method': 'Cash on Delivery'
                  }
                })
              });
            })
            .then(response => response.json())
            .then(() => {
              // Show success message
              setIsSubmitting(false);
              setIsOrderCreated(true);
              
              // Reset form and close modal after delay
              setTimeout(() => {
                // Optionally redirect to thank you page
                // window.location.href = '/pages/thank-you';
                
                setIsOrderCreated(false);
                setFormData({
                  name: '',
                  address: '',
                  pincode: '',
                  contactNumber: ''
                });
                setIsModalOpen(false);
              }, 2000);
            })
            .catch(error => {
              console.error('Error creating order:', error);
              setIsSubmitting(false);
              alert('There was an error processing your order. Please try again.');
            });
        }
      };

      // Prevent body scrolling when modal is open
      React.useEffect(() => {
        if (isModalOpen) {
          document.body.style.overflow = 'hidden';
        } else {
          document.body.style.overflow = 'unset';
        }
        
        return () => {
          document.body.style.overflow = 'unset';
        };
      }, [isModalOpen]);

      return (
        <div className="flex flex-col items-center justify-center" style="backgroundColor: '#f6f6e9', color: '#291b15'">
          {/* Liquid Button */}
          <button
            onClick={() => setIsModalOpen(true)}
            className="heartbeat-btn relative overflow-hidden font-bold py-3 px-8 rounded-full transition-all duration-300 focus:outline-none transform hover:scale-105"
            style="backgroundColor: '#3d3b3a',animation: 'heartbeat 2s infinite'"
          >
            <span className="relative z-10" style="color: '#f6f6e9', fontFamily: 'Forum, serif'">{buttonText}</span>
            <div className="absolute inset-0 opacity-20">
              <div className="liquid-animation"></div>
            </div>
          </button>

          {/* Modal Overlay */}
          {isModalOpen && (
            <div className="fixed inset-0 z-50 flex items-end justify-center bg-black bg-opacity-50 animate-fadeIn">
              <div 
                className="w-full max-w-md rounded-t-xl p-6 shadow-xl animate-slideUp"
                style="maxHeight: '90vh',overflowY: 'auto',backgroundColor: '#f6f6e9',color: '#291b15',fontFamily: 'Forum, serif'"
              >
                {/* Modal Header */}
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold" style="color: '#291b15' ">Create New Order</h2>
                  <button
                    onClick={() => setIsModalOpen(false)}
                    className="focus:outline-none"
                    style="color: '#291b15' "
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>

                {/* Modal Body - Form Fields */}
                {isOrderCreated ? (
                  <div className="py-6 text-center" style="color: '#291b15' ">
                    <svg className="w-16 h-16 mx-auto mb-4" style="color: '#3d3b3a' " fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <h3 className="text-xl font-medium">Order Created Successfully!</h3>
                  </div>
                ) : (
                  <div>
                    {/* Name Input */}
                    <div className="mb-4">
                      <label className="block text-sm font-bold mb-2" style="color: '#291b15' " htmlFor="name">
                        Name
                      </label>
                      <input
                        id="name"
                        name="name"
                        type="text"
                        placeholder="Enter your full name"
                        className={`w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 ${
                          errors.name ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                        }`}
                        style="
                          backgroundColor: '#f6f6e9', 
                          color: '#291b15',
                          fontFamily: 'Forum, serif'
                        "
                        value={formData.name}
                        onChange={handleInputChange}
                      />
                      {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
                    </div>

                    {/* Address Textarea */}
                    <div className="mb-4">
                      <label className="block text-sm font-bold mb-2" style="color: '#291b15' " htmlFor="address">
                        Address
                      </label>
                      <textarea
                        id="address"
                        name="address"
                        rows="3"
                        placeholder="Enter your complete address"
                        className={`w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 ${
                          errors.address ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                        }`}
                        style="
                          backgroundColor: '#f6f6e9', 
                          color: '#291b15',
                          fontFamily: 'Forum, serif'
                        "
                        value={formData.address}
                        onChange={handleInputChange}
                      />
                      {errors.address && <p className="text-red-500 text-xs mt-1">{errors.address}</p>}
                    </div>

                    {/* Pincode Input */}
                    <div className="mb-4">
                      <label className="block text-sm font-bold mb-2" style="color: '#291b15' " htmlFor="pincode">
                        Pincode
                      </label>
                      <input
                        id="pincode"
                        name="pincode"
                        type="text"
                        placeholder="Enter 6-digit pincode"
                        maxLength="6"
                        className={`w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 ${
                          errors.pincode ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                        }`}
                        style="
                          backgroundColor: '#f6f6e9', 
                          color: '#291b15',
                          fontFamily: 'Forum, serif'
                        "
                        value={formData.pincode}
                        onChange={handleInputChange}
                      />
                      {errors.pincode && <p className="text-red-500 text-xs mt-1">{errors.pincode}</p>}
                    </div>

                    {/* Contact Number Input */}
                    <div className="mb-6">
                      <label className="block text-sm font-bold mb-2" style="color: '#291b15' " htmlFor="contactNumber">
                        Contact Number
                      </label>
                      <div className="flex">
                        <span 
                          className="inline-flex items-center px-3 border border-r-0 border-gray-300 rounded-l-md"
                          style="backgroundColor: '#3d3b3a', color: '#f6f6e9' "
                        >
                          +91
                        </span>
                        <input
                          id="contactNumber"
                          name="contactNumber"
                          type="tel"
                          placeholder="Enter 10-digit mobile number"
                          maxLength="10"
                          className={`w-full px-3 py-2 border rounded-r-lg shadow-sm focus:outline-none focus:ring-2 ${
                            errors.contactNumber ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                          }`}
                          style="
                            backgroundColor: '#f6f6e9', 
                            color: '#291b15',
                            fontFamily: 'Forum, serif'
                          "
                          value={formData.contactNumber}
                          onChange={handleInputChange}
                        />
                      </div>
                      {errors.contactNumber && <p className="text-red-500 text-xs mt-1">{errors.contactNumber}</p>}
                    </div>

                    {/* Submit Button */}
                    <button
                      onClick={handleSubmit}
                      disabled={isSubmitting}
                      className={`w-full heartbeat-btn font-bold py-3 px-4 rounded-lg transition-all duration-300 mb-3 ${
                        isSubmitting ? 'opacity-75 cursor-not-allowed' : ''
                      }`}
                      style="
                        backgroundColor: '#3d3b3a', 
                        color: '#f6f6e9',
                        fontFamily: 'Forum, serif',
                        animation: isSubmitting ? 'none' : 'heartbeat 2s infinite'
                      "
                    >
                      {isSubmitting ? (
                        <div className="flex items-center justify-center">
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Processing...
                        </div>
                      ) : (
                        <span>Order now @ Rs {productPrice} only!<br />with Free shipping and Cash on Delivery</span>
                      )}
                    </button>
                    
                    {/* Secondary Button - Outline Style */}
                    <button
                      onClick={() => {
                        if (validateForm()) {
                          window.location.href = checkoutUrl + 
                            '?name=' + encodeURIComponent(formData.name) + 
                            '&address=' + encodeURIComponent(formData.address) + 
                            '&pincode=' + encodeURIComponent(formData.pincode) + 
                            '&contactNumber=' + encodeURIComponent(formData.contactNumber) +
                            '&discount=50';
                        }
                      }}
                      className="w-full font-bold py-3 px-4 rounded-lg transition-all duration-300 border-2 hover:shadow-md"
                      style="
                        backgroundColor: '#f6f6e9', 
                        color: '#3d3b3a',
                        borderColor: '#3d3b3a',
                        fontFamily: 'Forum, serif',
                        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
                      "
                    >
                      Pay now and get Rs 50 off
                    </button>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* CSS for font and animations */}
          <style>{`
            @import url('https://fonts.googleapis.com/css2?family=Forum&display=swap');
            
            .animate-fadeIn {
              animation: fadeIn 0.3s ease-out;
            }
            
            .animate-slideUp {
              animation: slideUp 0.4s ease-out;
            }
            
            @keyframes fadeIn {
              from { opacity: 0; }
              to { opacity: 1; }
            }
            
            @keyframes slideUp {
              from { transform: translateY(100%); }
              to { transform: translateY(0); }
            }
            
            .liquid-animation {
              position: absolute;
              top: 0;
              left: 0;
              width: 200%;
              height: 200%;
              background: linear-gradient(
                90deg,
                rgba(255,49,49,0.1) 25%,
                rgba(255,49,49,0.3) 50%,
                rgba(255,49,49,0.1) 75%
              );
              filter: blur(5px);
              animation: wave 3s infinite linear;
            }
            
            @keyframes wave {
              0% {
                transform: translate(-50%, -75%) rotate(0deg);
              }
              100% {
                transform: translate(-50%, -75%) rotate(360deg);
              }
            }
            
            @keyframes heartbeat {
              0% {
                transform: scale(1);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
              }
              5% {
                transform: scale(1.08);
                box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
              }
              10% {
                transform: scale(1);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
              }
              15% {
                transform: scale(1.05);
                box-shadow: 0 7px 10px rgba(0, 0, 0, 0.3);
              }
              20% {
                transform: scale(1);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
              }
              100% {
                transform: scale(1);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
              }
            }
            
            .heartbeat-btn {
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            }
          `}</style>
        </div>
      );
    };

    // Render the component to the container
    const root = ReactDOM.createRoot(container);
    root.render(React.createElement(LiquidButton, { 
      buttonText: buttonText, 
      productPrice: productPrice,
      checkoutUrl: checkoutUrl
    }));
  });
</script>
